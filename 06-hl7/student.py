#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This exercise has the goal to create new patients and observations
# from HL7 messages, into the OpenMRS electronic health record system.
#
# USAGE: During the development, make sure to run:
#
# $ docker compose up
#
# This will start the OpenMRS Reference Application 2.13 on your
# computer using Docker Compose (same as in exercise "05-openmrs").


import HL7Toolbox
import OpenMRSClient
import flask
import json


app = flask.Flask(__name__)


global_credentials = None

@app.route('/')
def redirection():
    return flask.redirect('index.html', code = 302)

@app.route('/index.html')
def get_index():
    with open('resources/index.html', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/html')

@app.route('/app.js')
def get_javascript():
    with open('resources/app.js', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/javascript')


# Throughout the code, make sure to use the credentials contained in
# the global variable "global_credentials" when creating the client
# connections to OpenMRS.
def app_initialize(credentials):
    global global_credentials
    global_credentials = credentials


@app.route('/find-patient', methods = [ 'GET' ])
def find_patient():
    # This route search for patients in OpenMRS, given a custom
    # identifier from external systems. This identifier is *not* the
    # autogenerated OpenMRS ID, but the patient identifier that is
    # used for HL7 integration throughout all the information systems
    # the hospital.
    #
    # Inputs: The "custom-id" GET argument contains the custom
    # identifier of interest.
    #
    # Outputs: The body of the HTTP response must be a JSON object
    # containing the UUIDs for both the patient and its single
    # associated visit. More precisely:
    #
    # {
    #   "patient-uuid": "c7c64b80-e5ee-40a3-8137-5df23c45575d",
    #   "visit-uuid": "a355bb40-b704-4df9-a392-12d7aa3aa631"
    # }
    #
    # If the custom identifier cannot be found, or if the patient is
    # associated with multiple visits, a 404 "Not Found" HTTP status
    # must be answered.
    #
    # Hint: Check out the "find_patient_by_custom_id()" in the
    # "OpenMRSClient" class.
    custom_id = flask.request.args.get('custom-id')
    if not custom_id:
        return flask.Response('Missing custom-id\n', 400)

    client = OpenMRSClient.OpenMRSClient(url=global_credentials['url'],
                                         username=global_credentials['username'],
                                         password=global_credentials['password'])

    try:
        # Step 1: Look up patient by custom external identifier
        patient_uuid = client.find_patient_by_custom_id(custom_id)
        if patient_uuid is None:
            return flask.Response('Patient not found\n', 404)

        # Step 2: Check number of visits for this patient
        visits = client.list_visits(patient_uuid)
        if len(visits) != 1:
            return flask.Response('Patient must have exactly one visit\n', 404)

        # Step 3: Return JSON response with UUIDs
        return flask.jsonify({
            'patient-uuid': patient_uuid,
            'visit-uuid': visits[0]
        })

    except Exception as e:
        return flask.Response(f'Error: {str(e)}\n', 500)

    


@app.route('/hl7', methods = [ 'POST' ])
def hl7_handler():
    # This method implements the processing of HL7 messages. Check out
    # the HL7 Interface Specification below.
    #
    # Inputs: The request body contains a HL7 message.
    #
    # Outputs: The request body contains a HL7 acknowledgment. Make
    # sure to use the MIME type "text/hl7v2" is the HTTP headers of
    # the answer. The acknowledgment code (MSA-1) must be either "AA"
    # if success, or "AE" if some error occurs or if the message is
    # not supported.
    #
    # HL7 Interface Specification: You must implement the following
    # messages:
    #
    # - ADT^A04: On reception of this message, you must create a new
    #   patient in OpenMRS, and associate it with one new visit. You
    #   have to consider the following fields: EVN-1, PID-3, PID-5,
    #   PID-7, PID-8, and PV1-44. Make sure to associate the start
    #   date of the visit with PV1-44.
    #
    #   If the patient already exists in OpenMRS, the patient must
    #   first be deleted, then re-created.
    #
    # - ORU^R01: On reception of this message, you must create a new
    #   encounter within the visit associated with the patient of
    #   interest, and fill this new encounter with observations. You
    #   have to consider the following fields: PID-3, OBR-4, OBR-7,
    #   OBX-2, OBX-3, and OBX-5.
    #
    #   The OBR segment must be unique (it defines the parameters of
    #   the encounter), but there might multiple OBX segments (each
    #   OBX segment defines one observation in the encounter).
    #
    #   The OBR-4 field provides the type of encounter: It can either
    #   be "Vitals" (to record an encounter of "Vitals" type in the
    #   OpenMRS Reference Application), or "Visit Note" (to record a
    #   "Visit Note" encounter in OpenMRS). A "AE" error must be
    #   returned if the value of OBR-4 is not supported.
    #
    #   The OBX-3 field provide the type of observation. Its first
    #   component can be "8310-5" (which indicates an observation of
    #   vitals "Temperature (c)" in OpenMRS Reference Application),
    #   "3141-9" (which corresponds to vitals "Weight (kg)"), or
    #   "11488-4" (which corresponds to "Text of encounter note" in
    #   the "Visit Note" encounter). If the value of OBX-3 is ignored
    #   or is not allowed in the encounter, it can simply be ignored.
    #
    # Hints:
    #
    # - Check out the content of the "HL7Toolbox.py" library. It
    #   contains useful functions for this task.
    #
    # - The patient identifiers in the HL7 messages correspond to what
    #   is called a "custom identifier from external systems" in the
    #   "OpenMRSClient" class. Do not confuse HL7 patient identifiers
    #   with the "OpenMRS ID".
    #
    # - As far as the MSH segment is concerned, you can focus on the
    #   following fields: MSH-3, MSH-4, MSH-5, MSH-6, MSH-7, MSH-9,
    #   MSH-10, and MSH-12.

    try:
        # Parse the HL7 message from the request body
        msg = HL7Toolbox.parse_message(flask.request.data)
        msh = msg.segment('MSH')
        msg_type = msh[9][0]
        msg_id = msh[10][0]


        client = OpenMRSClient.OpenMRSClient(url=global_credentials['url'],
                                         username=global_credentials['username'],
                                         password=global_credentials['password'])


        if msg_type[0][0] == 'ADT' and msg_type[1][0] == 'A04':
            pid = msg.segment('PID')
            pv1 = msg.segment('PV1')
            evn = msg.segment('EVN')

            event_type = evn[1][0]

            custom_id = pid[3][0][0]  
            family_name = pid[5][0][0][0]
            first_name = pid[5][0][1][0]
            birth_date = HL7Toolbox.parse_date_time(pid[7][0])
            gender = pid[8][0]
            visit_time = HL7Toolbox.parse_date_time(pv1[44][0])

            existing = client.find_patient_by_custom_id(custom_id)
            if existing:
                client.delete_patient(existing)

            patient_uuid = client.create_patient(
                given_name=first_name,
                family_name=family_name,
                gender=gender,
                birth_date=birth_date,
                custom_identifiers=custom_id
            )

            client.create_visit(patient_uuid, start_date_time=visit_time)
            return _hl7_ack(msh, msg_id, 'AA')


        elif msg_type[0][0] == 'ORU' and msg_type[1][0] == 'R01':
            pid = msg.segment('PID')
            obr = msg.segment('OBR')
            obx_segments = msg.segments('OBX')

            custom_id = pid[3][0][0][0]
            encounter_type = obr[4][0]
            encounter_time = HL7Toolbox.parse_date_time(obr[7][0])

            if encounter_type not in ['Vitals', 'Visit Note']:
                return _hl7_ack(msh, msg_id, 'AE', 'Unsupported encounter type')

            patient_uuid = client.find_patient_by_custom_id(custom_id)
            if not patient_uuid:
                return _hl7_ack(msh, msg_id, 'AE', 'Patient not found')

            visits = client.list_visits(patient_uuid)
            if len(visits) != 1:
                return _hl7_ack(msh, msg_id, 'AE', 'Invalid number of visits')

            visit_uuid = visits[0]
            encounter_uuid = client.create_encounter(
                visit_uuid,
                encounter_type=encounter_type,
                date_time=encounter_time
            )

            for obx in obx_segments:
                loinc = obx[3][0][0][0]
                value = obx[5][0]

                if encounter_type == 'Vitals':
                    if loinc == '8310-5':
                        client.create_observation(encounter_uuid, 'Temperature (c)', value)
                    elif loinc == '3141-9':
                        client.create_observation(encounter_uuid, 'Weight (kg)', value)
                elif encounter_type == 'Visit Note':
                    if loinc == '11488-4':
                        client.create_observation(encounter_uuid, 'Text of encounter note', value)

            return _hl7_ack(msh, msg_id, 'AA')

        # -----------------------------
        # Unsupported message type
        # -----------------------------
        else:
            return _hl7_ack(msh, msg_id, 'AE', 'Unsupported message type')

    except Exception as e:
        return _hl7_ack(None, None, 'AE', f'Error: {str(e)}')

    

def _hl7_ack(msh, msg_id, code, error_message=None):
    now        = HL7Toolbox.format_now()
    new_ctrl   = HL7Toolbox.generate_message_id()

    # Unwrap the usual MSH fields (each msh[i] is a oneâ€‘element list):
    enc_chars  = msh[2][0]  if msh and len(msh)>2 else ''
    orig_sapp  = msh[5][0]  if msh and len(msh)>5 else ''
    orig_sfac  = msh[6][0]  if msh and len(msh)>6 else ''
    orig_rapp  = msh[3][0]  if msh and len(msh)>3 else ''
    orig_rfac  = msh[4][0]  if msh and len(msh)>4 else ''
    orig_type0  = msh[9][0][0][0]  if msh and len(msh)>8 else ''
    orig_type1 = msh[9][0][1][0]  if msh and len(msh)>8 else ''
    orig_ver   = msh[11][0] if msh and len(msh)>11 else '2.3'


    orig_type = orig_type0 + '^' + orig_type1
    msh_fields = [
        'MSH',         # segment name
        enc_chars,     # MSH-2: encoding chars
        orig_sapp,     # MSH-3: (was original MSH-5)
        orig_sfac,     # MSH-4: (was original MSH-6)
        orig_rapp,     # MSH-5: (was original MSH-3)
        orig_rfac,     # MSH-6: (was original MSH-4)
        now,           # MSH-7: timestamp
        '',            # MSH-8: security (blank)
        orig_type,     # MSH-9: original messageType^event
        new_ctrl,      # MSH-10: new control ID
        'P',           # MSH-11: processing ID
        orig_ver       # MSH-12: version
    ]
    ack = ['|'.join(msh_fields) + '\r',
           f"MSA|{code}|{msg_id or ''}\r"]



    return flask.Response(''.join(ack), mimetype='text/hl7v2')







if __name__ == '__main__':
    app_initialize({
        'url' : 'http://localhost:8003/openmrs/ws/rest',
        'username' : 'admin',
        'password' : 'Admin123',
    })
    
    with app.test_client() as client:
        with open('resources/RegisterPatient.hl7', 'rb') as f:
            hl7_data = f.read()
        # msg = HL7Toolbox.parse_message(hl7_data)
        # msh = msg.segment('MSH')
        # pid = msg.segment('PID')
        # pv1 = msg.segment('PV1')
        # evn = msg.segment('EVN')
        # print(msh[2][0])


    app.run(debug = True)
    

