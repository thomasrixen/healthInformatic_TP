#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This exercise has the same objective as "03-ehrbase", but using
# CouchDB instead of EHRbase.
#
# USAGE: During the development, make sure to run:
#
# $ docker compose up
#
# This will start an CouchDB server on your computer using Docker
# Compose.
#
# Hints:
#
# - To check that CouchDB is running, you can open
#   "http://localhost:8002/_utils/" using your Web browser, with
#   username "admin" and password "password" (without the
#   quotes). This opens a Web-based interface, which provides an
#   access to many of the features of the CouchDB REST API.


import CouchDBClient
import datetime
import flask
import json

app = flask.Flask(__name__)


global_credentials = None

@app.route('/')
def redirection():
    return flask.redirect('index.html', code = 302)

@app.route('/index.html')
def get_index():
    with open('index.html', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/html')

@app.route('/app.js')
def get_javascript():
    with open('app.js', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/javascript')


def app_initialize(credentials):
    # This function must create a collection in the CouchDB server to
    # store both patients and temperatures (in the same
    # collection). The credentials to the CouchDB server are available
    # in the "credentials" argument. The name of the collection to be
    # used in CouchDB is available in the field "couchdb-collection"
    # of the "credentials" argument. This function can be invoked
    # multiple times: If the database already exists, it must be
    # deleted, then re-created from scratch.
    #
    # You must use the following JSON layout to record a patient:
    #
    # {
    #   "type" : "patient",
    #   "name" : "Jodogne"
    # }
    #
    # And the following to record a temperature:
    #
    # {
    #   "type": "temperature",
    #   "patient_id": "21ff746f37ef702b877fc4068a0007ba",
    #   "temperature": 37.2,
    #   "time": "2025-03-16T09:29:18.356307"
    # }
    #
    # Hints:
    #
    # - The "record_temperature()" function includes the code for
    #   generating a proper string for the "time" field.
    #
    # - The "patient_id" must contain the identifier that was
    #   generated by CouchDB when recording the patient.
    #
    # - Optional: You can install CouchDB views in this function (this
    #   is not mandatory, but using views will improve performance and
    #   atomicity, contrarily to explicit loops over documents).

    global global_credentials
    global_credentials = credentials

    client = CouchDBClient.CouchDBClient(credentials['url'], credentials['username'], credentials['password'])

    db_name = credentials['couchdb-collection']

    if db_name in client.listDatabases():
        client.deleteDatabase(db_name)

    client.createDatabase(db_name)





@app.route('/create-patient', methods = [ 'POST' ])
def create_patient():
    # This route adds a new patient to the collection on the CouchDB
    # server. The corresponding JSON document contains the demographic
    # information about the patient (only her name in this exercise).
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # one single field entitled "name", which specifies the name of
    # the patient.
    #
    # Output: The body of the HTTP response must be a JSON object
    # containing one single field entitled "id", which indicates the
    # identifier that was auto-generated by CouchDB for the newly
    # created patient.

    data = flask.request.get_json()
    patient_name = data.get("name")

    if patient_name is None:
        return flask.Response('{"error": "Missing name, for creating a patient"}\n', 400)
    
    patient_doc = {
        'type': 'patient',
        'name': patient_name
    }
    
    client = CouchDBClient.CouchDBClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])
    
    db_name = global_credentials['couchdb-collection']

    patient_id = client.addDocument(db_name, patient_doc)


    return flask.jsonify({ 'id': patient_id })



@app.route('/record-temperature', methods = [ 'POST' ])
def record_temperature():
    # This route records a new temperature by adding a new JSON
    # document to the collection on the CouchDB server.
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # two fields:
    #
    # - "patient_id" is the identifier of the patient, as obtained
    #   from "POST /create-patient".
    #
    # - "temperature" is a floating-point number containing the body
    #   temperature (expressed in Celsius).
    #
    # Output: The body of the HTTP response must be a JSON object
    # containing one single field entitled "id", which indicates the
    # CouchDB identifier of the newly recorded temperature.

    # Encode the current time, to be recorded in the "time" field of
    # the JSON document:
    time = datetime.datetime.now().isoformat()

    data = flask.request.get_json()
    patient_id = data.get("patient_id")
    temperature = data.get("temperature")

    if patient_id is None:
        return flask.Response('{"error": "Missing patient_id, for recording a temperature"}\n', 400)
    if temperature is None:
        return flask.Response('{"error": "Missing temperature, for recording a temperature"}\n', 400)
    
    temperature_doc = {
        "patient_id": patient_id,
        "type": "temperature",
        "temperature": temperature,
        "time": time
    }

    client = CouchDBClient.CouchDBClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])

    patient_id = client.addDocument(global_credentials['couchdb-collection'], temperature_doc)

    return flask.jsonify({ 'id': patient_id })


@app.route('/patients', methods = [ 'GET' ])
def list_patients():
    # This route lists all the patients that are stored in the
    # collection on the CouchDB server.
    #
    # Inputs: The route takes no argument.
    #
    # Output: The body of the HTTP response must be a JSON array that
    # contains one JSON object for each patient. Each of those JSON
    # objects must contain two fields:
    #
    # - "id" is the identifier of the patient.
    #
    # - "name" is the name of the patient, as provided during the call
    #   to "POST /create-patient".
    #
    # Hint: Try creating a CouchDB view to filter the stored JSON
    # documents whose "type" field is "patient".

    
    client = CouchDBClient.CouchDBClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])
    db_name = global_credentials['couchdb-collection']

    patients = client.listDocuments(db_name)
    result = []

    for patient_id in patients:
        patient = client.getDocument(db_name, patient_id)
        if patient['type'] == 'patient':
            result.append({ 'id': patient_id, 'name': patient['name'] })
    
    return flask.jsonify(result)


@app.route('/temperatures', methods = [ 'GET' ])
def list_temperatures():
    # This route lists all the body temperatures that have been
    # recorded for one patient, sorted by increasing time.
    #
    # Inputs: The route takes the identifier of the patient as its GET
    # argument named "id".
    #
    # Output: The body of the HTTP response must be a JSON array that
    # contains one JSON object for each recorded temperature for the
    # patient of interest. Each of those JSON objects must contain the
    # following fields:
    #
    # - "time" is the time of the recorded temperature.
    #
    # - "temperature" is the value of the recorded temperature
    #   (expressed in Celsius).
    #
    # The array must be sorted by increasing values of "time".
    #
    # Hint: Try creating a CouchDB view to filter the stored JSON
    # documents whose "type" field is "temperature" and whose
    # "patient" field is the GET argument "id".

    patient_id = flask.request.args.get("id")
    if patient_id is None:
        return flask.Response('{"error": "Missing patient_id, for listing temperatures"}\n', 400)

    client = CouchDBClient.CouchDBClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])
    db_name = global_credentials['couchdb-collection']
    
    temperatures = client.listDocuments(db_name)
    result = []

    for temperature_id in temperatures:
        temperature = client.getDocument(db_name, temperature_id)
        if temperature['type'] == 'temperature' and temperature['patient_id'] == patient_id:
            result.append({ 'time': temperature['time'], 'temperature': temperature['temperature'] })

    result = sorted(result, key=lambda x: x['time'])
    return flask.jsonify(result)
    

if __name__ == '__main__':
    app_initialize({
        'url' : 'http://localhost:8002/',
        'username' : 'admin',
        'password' : 'password',
        'couchdb-collection' : 'ehr',
    })
    #run create patient 
    app.run(debug = True)
