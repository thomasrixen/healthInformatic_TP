#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This exercise has the goal to associate patients with clinical notes
# using the OpenMRS electronic health record system. It is exactly the
# same as "05-openmrs", but you MUST use FHIR instead of the custom
# REST API of OpenMRS.
#
# USAGE: During the development, make sure to run:
#
# $ docker compose up
#
# This will start the OpenMRS Reference Application 2.13 on your
# computer using Docker Compose (same as in exercise "05-openmrs").
#
# Hints:
#
# - The list of all the FHIR endpoints supported by OpenMRS is
#   available at: https://fhir.openmrs.org/toc.html
#
# - Additional information about the FHIR support of OpenMRS can be found at:
#   https://openmrs.atlassian.net/wiki/spaces/docs/pages/26935684/FHIR+OpenMRS+Strategy+Tools+FHIR+API+and+Help
#
# - This example is the same as "05-openmrs" (in particular, same
#   integration tests and same Web interface), but you can ONLY use
#   FHIR. As a consequence, do *not* use the native REST API of
#   OpenMRS, as this API is blocked on INGInious! Make sure to only
#   use FHIR routes.
#
# - The "OpenMRSClient" class contains methods that will help you to
#   create skeleton FHIR resources with the minimal information that
#   is required by OpenMRS. These methods can be identified by the
#   "_fhir_" in their name.
#
# - The "FHIRClient" class provides a basic client library to connect
#   to an arbitrary FHIR, including OpenMRS.


import FHIRClient
import OpenMRSClient
import flask
import json
import pprint

app = flask.Flask(__name__)


global_credentials = None

@app.route('/')
def redirection():
    return flask.redirect('index.html', code = 302)

@app.route('/index.html')
def get_index():
    with open('index.html', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/html')

@app.route('/app.js')
def get_javascript():
    with open('app.js', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/javascript')


# Throughout the code, make sure to use the credentials contained in
# the global variable "global_credentials" when creating the FHIR
# client connections to OpenMRS.
#
# Pay attention that these credentials contain two URLs: The field
# "fhir-url" provides the URL to the FHIR API, while the field
# "openmrs-url" provides the URL to the Web services of OpenMRS.
#
# Also, note that "openmrs-url" is blocked if executed on INGInious,
# to force you to use only FHIR. The only routes in the OpenMRS API
# that can be used are related to entity discovery (cf. the methods in
# class "OpenMRSClient" whose name contain "_fhir_").
def app_initialize(credentials):
    global global_credentials
    global_credentials = credentials


@app.route('/create-patient', methods = [ 'POST' ])
def create_patient():
    # This route adds a new patient to the FHIR server. One new visit
    # must also be created and associated with the patient.
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # the given name, the family name, the gender, and the birth date
    # of the patient, which are mandatory information for "Patient"
    # FHIR resources. More precisely:
    #
    # {
    #   "given-name" : "Paul",
    #   "family-name" : "McCartney",
    #   "gender" : "M",
    #   "birth-date" : "1942-06-18"
    # }
    #
    # Outputs: The body of the HTTP response must be a JSON object
    # containing the FHIR identifiers generated by the FHIR server for
    # both the newly created patient and visit. More precisely:
    #
    # {
    #   "patient-uuid": "c7c64b80-e5ee-40a3-8137-5df23c45575d",
    #   "visit-uuid": "a355bb40-b704-4df9-a392-12d7aa3aa631"
    # }

    # TODO
    return flask.Response('Not Implemented\n', 501)


@app.route('/find-patients', methods = [ 'POST' ])
def find_patients():
    # This route search for patients in the FHIR server, given a query
    # that specifies a patient's family name.
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # one "query" field containing the family name to look for. For
    # instance:
    #
    # {
    #   "query" : "McCartney"
    # }
    #
    # Output: The body of the HTTP response must be a JSON array that
    # contains one JSON object for each matching patient. Each of
    # those JSON objects must contain the following fields:
    #
    # {
    #   "birth-date" : "1942-06-18",
    #   "gender" : "M",
    #   "name" : "Paul McCartney",
    #   "patient-id" : "100UMP",
    #   "patient-uuid" : "c7c64b80-e5ee-40a3-8137-5df23c45575d"
    # }

    # TODO
    return flask.Response('Not Implemented\n', 501)


@app.route('/record-note', methods = [ 'POST' ])
def record_note():
    # This route records a new clinical note for a patient. The
    # clinical note must be stored inside a new encounter of type
    # "Visit Note" that is part of the visit created for the patient,
    # as one single observation whose type corresponds to the concept
    # "Text of encounter note".
    #
    # Inputs: The body of the HTTP request is a JSON object providing
    # the FHIR identifier of the patient and the text of the clinical
    # note. More precisely:
    #
    # {
    #   "patient-uuid" : "c7c64b80-e5ee-40a3-8137-5df23c45575d",
    #   "text" : "Hello, world!"
    # }
    #
    # Output: The body of the HTTP response must be a JSON object
    # providing the FHIR identifier of the newly created encounter and
    # observation. More precisely:
    #
    # {
    #   "encounter-uuid": "4cece72b-d677-4b77-90f1-1cb201e8a727",
    #   "observation-uuid": "04ad9388-fb27-4494-a9f3-78ab44a79181"
    # }

    # TODO
    return flask.Response('Not Implemented\n', 501)


@app.route('/notes', methods = [ 'GET' ])
def list_notes():
    # This route returns demographic information about one patient of
    # interest, together with the list of all the clinical notes that
    # have been recorded for this patient. The most recent clinical
    # note must be listed first.
    #
    # Inputs: The route receives the FHIR identifier of the patient of
    # interest in the GET argument named "patient-uuid".
    #
    # Output: The body of the HTTP response must be a JSON object with
    # the following content:
    #
    # {
    #   "notes" : [
    #     {
    #       "text" : "This is another note",
    #       "time" : "2025-03-25T16:06:46.000+0000"
    #     },
    #     {
    #       "text" : "Hello, world!",
    #       "time" : "2025-03-25T16:03:16.000+0000"
    #     }
    #   ],
    #   "patient" : {
    #     "birth-date" : "1942-06-18",
    #     "gender" : "M",
    #     "id" : "100UMP",
    #     "name" : "Paul McCartney",
    #     "visit-uuid" : "a355bb40-b704-4df9-a392-12d7aa3aa631"
    #   }
    # }
    #
    # The "notes" array must be sorted by decreasing values of "time".

    # TODO
    return flask.Response('Not Implemented\n', 501)


if __name__ == '__main__':
    app_initialize({
        'openmrs-url' : 'http://localhost:8003/openmrs/ws/rest',
        'fhir-url' : 'http://localhost:8003/openmrs/ws/fhir2/R4',
        'username' : 'admin',
        'password' : 'Admin123',
    })
    app.run(debug = True)
