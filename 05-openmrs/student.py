#!/usr/bin/env python3
# -*- coding: utf-8 -*-

# This exercise has the goal to associate patients with clinical notes
# using the OpenMRS electronic health record system.
#
# USAGE: During the development, make sure to run:
#
# $ docker compose up
#
# This will start the OpenMRS Reference Application 2.13 on your
# computer using Docker Compose.
#
# Hints:
#
# - Starting OpenMRS can take more than one minute. Everything is
#   ready once you see "indexupdate-1 exited with code 0" in the logs
#   of Docker Compose.
#
# - The Web interface of OpenMRS can be opened at
#   "http://localhost:8003/openmrs/" using your Web browser, with
#   username "admin" and password "Admin123" (without the quotes). You
#   also have to choose a location for the session (for instance
#   "Inpatient Ward").
#
# - You can use the "OpenMRSClient.py" Python toolbox. Full reference
#   of the REST API of OpenMRS is available at:
#   https://rest.openmrs.org/
#
# - During the development, it is recommended to use
#   "pprint.pprint(resource)" to inspect the content of resources
#   returned by the REST API of OpenMRS.


import OpenMRSClient
import flask
import json
import pprint

app = flask.Flask(__name__)


global_credentials = None

@app.route('/')
def redirection():
    return flask.redirect('index.html', code = 302)

@app.route('/index.html')
def get_index():
    with open('index.html', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/html')

@app.route('/app.js')
def get_javascript():
    with open('app.js', 'r') as f:
        return flask.Response(f.read(), mimetype = 'text/javascript')


# Throughout the code, make sure to use the credentials contained in
# the global variable "global_credentials" when creating the client
# connections to OpenMRS.
def app_initialize(credentials):
    global global_credentials
    global_credentials = credentials




@app.route('/create-patient', methods = [ 'POST' ])
def create_patient():
    # This route adds a new patient to the OpenMRS server. One new
    # visit must also be created and associated with the patient.
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # the given name, the family name, the gender, and the birth date
    # of the patient, which are mandatory information for
    # OpenMRS. More precisely:
    #
    # {
    #   "given-name" : "Paul",
    #   "family-name" : "McCartney",
    #   "gender" : "M",
    #   "birth-date" : "1942-06-18"
    # }
    #
    # Outputs: The body of the HTTP response must be a JSON object
    # containing the UUIDs generated by OpenMRS for both the newly
    # created patient and visit. More precisely:
    #
    # {
    #   "patient-uuid": "c7c64b80-e5ee-40a3-8137-5df23c45575d",
    #   "visit-uuid": "a355bb40-b704-4df9-a392-12d7aa3aa631"
    # }

    data = flask.request.get_json()
    patient_name = data["given-name"]
    patient_family_name = data["family-name"]
    patient_gender = data["gender"]
    patient_birth_date = data["birth-date"]

    if patient_name == None:
        return flask.Response('Missing given-name, when creating a new patient\n', 400)
    if patient_family_name == None:
        return flask.Response('Missing family-name, when creating a new patient\n', 400)
    if patient_gender == None:
        return flask.Response('Missing gender, when creating a new patient\n', 400)
    if patient_birth_date == None:
        return flask.Response('Missing birth-date, when creating a new patient\n', 400)

    client = OpenMRSClient.OpenMRSClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])

    patient_id = client.create_patient(patient_name, patient_family_name, patient_gender, patient_birth_date)

    visit_id = client.create_visit(patient_id)

    return flask.jsonify({ 'patient-uuid': patient_id, 'visit-uuid': visit_id })


@app.route('/find-patients', methods = [ 'POST' ])
def find_patients():
    # This route search for patients in OpenMRS, given a query that
    # specifies a patient's identifier or name.
    #
    # Inputs: The body of the HTTP request is a JSON object containing
    # one "query" field containing the text of the query. For instance:
    #
    # {
    #   "query" : "McCart"
    # }
    #
    # Output: The body of the HTTP response must be a JSON array that
    # contains one JSON object for each matching patient (according to
    # the route "GET /v1/patient?q=..." in the OpenMRS REST API). Each
    # of those JSON objects must contain the following fields:
    #
    # {
    #   "age" : 82,
    #   "birth-date" : "1942-06-18",
    #   "gender" : "M",
    #   "name" : "Paul McCartney",
    #   "patient-id" : "100UMP",
    #   "patient-uuid" : "c7c64b80-e5ee-40a3-8137-5df23c45575d"
    # }
    #
    # Hint: The "birthdate" field returned by OpenMRS for the patient
    # resources contains both the date and the time. You can use the
    # "keep_only_date()" method of OpenMRSClient to remove the time
    # information.

    data = flask.request.get_json()
    query = data["query"]

    if query == None:
        return flask.Response('Missing query, when trying to find patients\n', 400)
    
    client = OpenMRSClient.OpenMRSClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])

    patient_uuids = client.find_patients(query)

    results = []
    for uuid in patient_uuids:
        patient = client.get_patient(uuid)
        person = patient['person']
        
        # for key, value in patient.items():
        #     print(key, " : ", value)
        #     print("\n")
        name = person['display']
        gender = person['gender']
        birthdate = person['birthdate']
        age = person['age']
        birth_date_only = client.keep_only_date(birthdate)
        patient_id = client.get_patient_identifier(uuid)


        patient_information = {
            "patient-uuid": uuid,
            "age": age,
            "birth-date": birth_date_only,
            "gender": gender,
            "name": name,
            "patient-id": patient_id
        }

        results.append(patient_information)

    
    return flask.jsonify(results)


@app.route('/record-note', methods = [ 'POST' ])
def record_note():
    # This route records a new clinical note for a patient. The
    # clinical note must be stored inside a new encounter of type
    # "Visit Note" that is part of the visit created for the patient,
    # as one single observation whose type corresponds to the concept
    # "Text of encounter note".
    #
    # Inputs: The body of the HTTP request is a JSON object providing
    # the UUID of the patient and the text of the clinical note. More
    # precisely:
    #
    # {
    #   "patient-uuid" : "c7c64b80-e5ee-40a3-8137-5df23c45575d",
    #   "text" : "Hello, world!"
    # }
    #
    # Output: The body of the HTTP response must be a JSON object
    # providing the UUID of the newly created encounter and
    # observation. More precisely:
    #
    # {
    #   "encounter-uuid": "4cece72b-d677-4b77-90f1-1cb201e8a727",
    #   "observation-uuid": "04ad9388-fb27-4494-a9f3-78ab44a79181"
    # }

    data = flask.request.get_json()
    patient_uuid = data["patient-uuid"]
    text = data["text"]

    if patient_uuid == None:
        return flask.Response('Missing patient-uuid, when trying to record a note\n', 400)
    
    if text == None:
        return flask.Response('Missing text, when trying to record a note\n', 400)
    
    client = OpenMRSClient.OpenMRSClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])

    visits = client.list_visits(patient_uuid)
    if len(visits) == 0:
        return flask.Response("No visit found for this patient\n", 500)

    visit_uuid = visits[0]

    encounter_uuid = client.create_encounter(
        visit_uuid=visit_uuid,
        encounter_type='Visit Note'
    )

    observation_uuid = client.create_observation(
        encounter_uuid=encounter_uuid,
        concept_name='Text of encounter note',
        value=text
    )

    return flask.jsonify({
        'encounter-uuid': encounter_uuid,
        'observation-uuid': observation_uuid
    })


@app.route('/notes', methods = [ 'GET' ])
def list_notes():
    # This route returns demographic information about one patient of
    # interest, together with the list of all the clinical notes that
    # have been recorded for this patient. The most recent clinical
    # note must be listed first.
    #
    # Inputs: The route receives the UUID of the patient of interest
    # in the GET argument named "patient-uuid".
    #
    # Output: The body of the HTTP response must be a JSON object with
    # the following content:
    #
    # {
    #   "notes" : [
    #     {
    #       "text" : "This is another note",
    #       "time" : "2025-03-25T16:06:46.000+0000"
    #     },
    #     {
    #       "text" : "Hello, world!",
    #       "time" : "2025-03-25T16:03:16.000+0000"
    #     }
    #   ],
    #   "patient" : {
    #     "birth-date" : "1942-06-18",
    #     "gender" : "M",
    #     "id" : "100UMP",
    #     "name" : "Paul McCartney",
    #     "visit-uuid" : "a355bb40-b704-4df9-a392-12d7aa3aa631"
    #   }
    # }
    #
    # The "notes" array must be sorted by decreasing values of "time".

    patient_uuid = flask.request.args.get('patient-uuid')

    if patient_uuid == None:
        return flask.Response('Missing patient-uuid, when trying to list notes\n', 400)
    

    client = OpenMRSClient.OpenMRSClient(global_credentials['url'], global_credentials['username'], global_credentials['password'])

    #Notes
    visits = client.list_visits(patient_uuid)
    if len(visits) == 0:
        return flask.Response("No visit found for this patient\n", 500)

    visit_uuid = visits[0]

    notes = []
    for encounter_uuid in client.list_encounters(visit_uuid):
        for obs_uuid in client.list_observations(encounter_uuid):
            obs = client.get_observation(obs_uuid)
            if obs['concept']['display'] == 'Text of encounter note':
                notes.append({
                    'text': obs['value'],
                    'time': obs['obsDatetime']
                })

    notes = sorted(notes, key = lambda x: x['time'], reverse = True)

    #Patient information

    patient = client.get_patient(patient_uuid)
    person = patient['person']

    birthdate = person['birthdate']
    name = person['display']
    gender = person['gender']
    birth_date_only = client.keep_only_date(birthdate)
    patient_id = client.get_patient_identifier(patient_uuid)


    patient_information = {
        "birth-date": birth_date_only,
        "gender": gender,
        "id": patient_id,
        "name": name,
        "visit-uuid": visit_uuid
    }



    response = {
        'patient': patient_information,
        'notes': notes
    }


    # TODO
    return flask.jsonify(response)

    

if __name__ == '__main__':
    app_initialize({
        'url' : 'http://localhost:8003/openmrs/ws/rest',
        'username' : 'admin',
        'password' : 'Admin123',
    })
    app.run(debug = True)
